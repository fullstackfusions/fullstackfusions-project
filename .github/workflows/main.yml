name: Build and Push FullStackFusions Image to AWS ECR

on:
  push:
    branches: [master]

jobs:
  build-and-deploy:
    name: Build, Push to ECR, and Deploy to ECS
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Automatic Tagging of Releases
        id: increment-git-tag
        run: |
          bash ./build/git_update.sh -v major

      - name: Build, Tag, and Push the Image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: fullstackfusions
          IMAGE_TAG: ${{ steps.increment-git-tag.outputs.git-tag }}
          REACT_APP_WEB3FORMS_ACCESS_KEY: ${{ secrets.REACT_APP_WEB3FORMS_ACCESS_KEY }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Render ECS task definition
        id: render-task-definition
        run: |
          sed -e "s|<AWS_ACCOUNT_ID>|${{ secrets.AWS_ACCOUNT_ID }}|g" \
              -e "s|<AWS_REGION>|${{ secrets.AWS_REGION }}|g" \
              -e "s|<IMAGE_TAG>|${{ steps.increment-git-tag.outputs.git-tag }}|g" \
              cicd/ecs-task-definition.json > cicd/rendered-task-definition.json

      - name: Register ECS task definition
        run: |
          aws ecs register-task-definition --cli-input-json file://cicd/rendered-task-definition.json

      - name: Update ECS service to use the new task definition
        env:
          CLUSTER: ${{ secrets.AWS_ECS_CLUSTER }}
          SERVICE: ${{ secrets.AWS_ECS_SERVICE }}
        run: |
          aws ecs update-service --cluster $CLUSTER --service $SERVICE --force-new-deployment --region ${{ secrets.AWS_REGION }}
